package com.winway.wwapp2;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import org.apache.http.HttpResponse;import org.apache.http.client.HttpClient;import org.apache.http.client.methods.HttpGet;import org.apache.http.client.methods.HttpPost;import org.apache.http.entity.StringEntity;import org.apache.http.impl.client.DefaultHttpClient;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import android.app.ActionBar;import android.app.Fragment;import android.app.FragmentManager;import android.content.Context;import android.content.SharedPreferences;import android.content.res.TypedArray;import android.graphics.Color;import android.graphics.drawable.ColorDrawable;import android.os.AsyncTask;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.util.Log;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.View.OnFocusChangeListener;import android.view.View.OnKeyListener;import android.view.View.OnTouchListener;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.Button;import android.widget.EditText;import android.widget.ListView;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.TextView.OnEditorActionListener;import android.widget.Toast;import android.widget.SimpleAdapter;import android.widget.AdapterView.OnItemClickListener;import com.winway.wwapp2.PullDownView.OnPullDownListener;import android.view.MotionEvent;import android.view.inputmethod.EditorInfo;public class NavbarMessageActivity extends BaseFragment implements OnPullDownListener, OnItemClickListener{	private ListView lstMsg;	//private SimpleAdapter adapter2;	private MsgListAdapter2 adapter2;	private TypedArray navMenuIcons;	private TypedArray navMenuIcons2;	private ArrayList<MsgItem> msgItems;	private Context context ;	private PullDownView mPullDownView;    private List<Map<String,String>> mStrings = new ArrayList<Map<String,String>>();	protected static final int REFRESH_DATA = 0x00000002;	private static final int WHAT_DID_LOAD_DATA = 0;	private static final int WHAT_DID_REFRESH = 1;	private static final int WHAT_DID_MORE = 5;	private int ACTION_MESSAGE;	private  int page = 1;	private Button btnMsg;	private String strSearchText = "";	private Button btnCancel;	private Button btnSearch;	private EditText editSearch;	 private RelativeLayout r1;	@Override	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {				//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());	  	//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 		return initView(inflater, container);	}	private View initView(LayoutInflater inflater, ViewGroup container) {				//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());	  	//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 		View view = inflater.inflate(R.layout.actnavbarmessage, container, false);		context = view.getContext();				InitUI(view);	    showActionbar();	    setTitle("Message");	    initPullDownView(view);	    this.ACTION_MESSAGE = 0;	    this.page = 1;	    if (this.msgItems.size() == 0)	      queryData(WHAT_DID_LOAD_DATA );		return view;	}	private void InitUI(View view)	  {		//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());	  	//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 	    this.r1 = ((RelativeLayout)view.findViewById(R.id.message_r1));	    this.editSearch = ((EditText)view.findViewById(R.id.search_text));	    this.btnMsg = ((Button)view.findViewById(R.id.btnMsg));	    this.btnSearch = ((Button)getActivity().findViewById(R.id.btn_search));	    this.btnCancel = ((Button)view.findViewById(R.id.btn_cancel));	    //顯示Search Edit功能	    if (this.btnSearch != null) {	      this.btnSearch.setOnClickListener(new OnClickListener(){	    	   @Override	    	   public void onClick(View view)	    	   {	   			//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());			  	//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 	    		   //如果未顯示，則顯示，已顯示則隱藏	    	              if(r1.getVisibility()!=View.VISIBLE){	    	            	  	    	            	  r1.setVisibility(View.VISIBLE);	    	            	  editSearch.clearFocus();	    	              }	    	              else {	    	            	  r1.setVisibility(View.GONE);	    	            	  	    	              }	    	   }	      });	    }	    //set Touch Cancel Button Function	    this.btnCancel.setOnClickListener(new OnClickListener(){	    	   @Override	    	   public void onClick(View view)	    	   {	    		   	   			//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());			  	//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 	    		   //hide it self	    	        view.setVisibility(View.GONE);	    	        //and show Action bar	    	        showActionbar();	    	        //clear focus	    	        editSearch.clearFocus();	    	   }	      });	    //set Search Edit On Click Event	    this.editSearch.setOnClickListener(new OnClickListener(){	    	   @Override	    	   public void onClick(View view)	    	   {	   			//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());			  	//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 	    		   ((MainActivity)getActivity()).hideActionbar();	    	   }	      });	    //set Search Edit OnTouch Event	    this.editSearch.setOnTouchListener(new OnTouchListener(){	    	   @Override	    	   public boolean onTouch(View view, MotionEvent event)	    	   {	   			//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());			  	//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 	    	     int n=event.getAction();	    	     return false;	    	   }	      });	    //set Search Edit Focus Event	    this.editSearch.setOnFocusChangeListener(new OnFocusChangeListener(){	    	@Override	    	 public void onFocusChange(View view, boolean isFocus)	    	  {				//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());			  	//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 	    	    if (isFocus)	    	    {	    	    	    	    	   if(btnCancel.getVisibility()!=View.VISIBLE){	    	    		   btnCancel.setVisibility(View.VISIBLE);		    		   }	    	    		    	         ((MainActivity)getActivity()).hideActionbar();	    	    }	    	  }	    		    });	    this.editSearch.setOnKeyListener(new OnKeyListener(){	    	@Override	    	 public boolean onKey(View view, int args, KeyEvent keyEvent)	    	  {	    				//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());			  	//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 	    		if (keyEvent.getAction()==KeyEvent.ACTION_DOWN && args == KeyEvent.KEYCODE_ENTER) {                    //do something here	    			 page=1;	                 strSearchText = editSearch.getText().toString();	                 ACTION_MESSAGE=WHAT_DID_LOAD_DATA;	                  msgItems.clear();					  queryData(ACTION_MESSAGE);					  editSearch.clearFocus();	                     return true;                }	    		return false;	    	  }				    		    });	   this.editSearch.setOnEditorActionListener(new OnEditorActionListener() {	        public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {	            				//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());			  	//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 	        	if ((event != null && ((event.getKeyCode() == KeyEvent.KEYCODE_ENTER)) || 	            		(actionId == EditorInfo.IME_ACTION_DONE)||(actionId == EditorInfo.IME_ACTION_SEARCH))) {	            	 page=1;	                 strSearchText = editSearch.getText().toString();	                 ACTION_MESSAGE=WHAT_DID_LOAD_DATA;	                  msgItems.clear();					  queryData(ACTION_MESSAGE);					  editSearch.clearFocus();		            }    	            return false;	        }	    });	  }	public void showActionbar()	{		//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());	  	//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 	    ActionBar mActionBar=getActivity().getActionBar();        if(mActionBar!=null&&mActionBar.isShowing()==false)mActionBar.show();	}	private void initPullDownView(View view)	{		//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());	  	//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 		/*		 * 1.使用PullDownView		 * 2.設置OnPullDownListener		 * 3.從mPullDownView里面獲取ListView		 */			mPullDownView = (PullDownView) view.findViewById(R.id.pull_down_view);		if(mPullDownView==null) return ;		mPullDownView.setOnPullDownListener(this);		lstMsg = mPullDownView.getListView();				lstMsg.setOnItemClickListener(this);		ColorDrawable cd=new ColorDrawable(getResources().getColor(R.color.list_divider));		lstMsg.setDivider(cd);		lstMsg.setChoiceMode(ListView.CHOICE_MODE_SINGLE);		lstMsg.setDividerHeight(1);		lstMsg.setHeaderDividersEnabled(true);		//adapter2 = new SimpleAdapter(context,mStrings,R.layout.pulldown_item,new String[]{"title","content"},new int[] {R.id.msg_title2,R.id.msg_content} );		msgItems = new ArrayList<MsgItem>();		 adapter2 = new MsgListAdapter2(context,msgItems);		lstMsg.setAdapter(adapter2);	   // lstMsg.setAdapter(adapter2);    		mPullDownView.enableAutoFetchMore(true, 1);			}	/*public void  home_announce_click(View view)	{		Fragment fragment = null;		fragment = new NavbarAnnounceActivity();	    FragmentManager fragmentManager = getFragmentManager();	    fragmentManager.beginTransaction().replace(R.id.content_frame, fragment).commit();	}		public void  home_favorite_click(View view)	{		Fragment fragment = null;		fragment = new NavbarFavoriteActivity();	    FragmentManager fragmentManager = getFragmentManager();	    fragmentManager.beginTransaction().replace(R.id.content_frame, fragment).commit();			}*/	public void setTitle(CharSequence title) 	{		//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());	  	//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber());         getActivity().getActionBar().setTitle(title);		Button btnAdd  =(Button)getActivity().findViewById(R.id.btn_favorite_add);		if(btnAdd.getVisibility()== View.VISIBLE)		{			btnAdd.setVisibility(View.GONE);		}		btnSearch.setVisibility(View.VISIBLE);    }	@Override	public void onItemClick(AdapterView<?> parent, View view, int position,			long id) {				//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());	  	//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 		// TODO Auto-generated method stub		 final MsgItem item = (MsgItem ) msgItems.get(position);		    Bundle bundle = new Bundle();			bundle.putString("id", item.getMsgId());         //Toast.makeText(getActivity().getApplicationContext(), item.getMsgId(), Toast.LENGTH_LONG).show();		    Fragment fragment = null;			fragment = new NavbarDetailActivity();			fragment.setArguments(bundle);			 FragmentManager fragmentManager = getFragmentManager();		    if(fragmentManager.findFragmentById(fragment.getId())==null)		     {		    	  fragmentManager.beginTransaction().add(R.id.content_frame, fragment,"detail").commit();		     }		    fragmentManager.beginTransaction().hide(this).commit();		    fragmentManager.beginTransaction().show(fragment).commit();		   // fragmentManager.beginTransaction().addToBackStack("message").commit();		   		    //fragmentManager.beginTransaction().addToBackStack(this.getActivity().toString());         //view.setSelected(true);         //view.setBackgroundColor(Color.LTGRAY);	}		 private void initBadge(Button button, int count)	  {		 			//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());		  	//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 	    if (button != null)	    {	    	if(count>0){	    		   BadgeView badge1 = new BadgeView(this.getActivity(), button);// 創建一個BadgeView物件，view為你需要顯示提醒的控制項	    			badge1.setText(Integer.toString(count)); // 需要顯示的提醒類容	    			badge1.setBadgePosition(BadgeView.POSITION_TOP_RIGHT);// 顯示的位置.右上角,BadgeView.POSITION_BOTTOM_LEFT,下左，還有其他幾個屬性	    			badge1.setTextColor(Color.WHITE); // 文本顏色	    			badge1.setBadgeBackgroundColor(Color.GRAY); //提醒資訊的背景顏色，自己設置	    			badge1.setTextSize(18); // 文本大小	    			badge1.setBadgeMargin(60, 5); // 水準和豎直方向的間距	    			//badge1.setBadgeMargin(30); //各邊間隔	    			// badge1.toggle(); //顯示效果，如果已經顯示，則隱藏，如果隱藏，則顯示	    			badge1.show();// 只有顯示	    	}	    }	  }	 private void queryData(int Message)	  {		 	//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());		  	//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 	    String url = super.getWebServiceUrl() + "GetMSGes";	    JSONObject jsonObject = new JSONObject();	    JSONObject data = new JSONObject();	    try	    {	     data.accumulate("condition", strSearchText);	      data.accumulate("readed", "");	      jsonObject.accumulate("userid", super.getLoginUser());	      jsonObject.accumulate("WWID", "13145774WWGlobal999988msg");	      jsonObject.accumulate("data", data);	      jsonObject.accumulate("page", Integer.toString(this.page));	      super.postRequest(url, jsonObject, Message);	      return;	    }	    catch (JSONException e)	    {	    	        e.printStackTrace();	    }	  }	 @Override		public void onRefresh() {		 			//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());		  	//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 			// TODO Auto-generated method stub	new Thread(new Runnable() {								@Override				public void run() {										//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());				  	//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 					String result="";							        ACTION_MESSAGE=WHAT_DID_REFRESH;				    queryData(ACTION_MESSAGE);				}			}).start();		}		@Override		public void onMore() {						//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());		  	//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 			// TODO Auto-generated method stub	new Thread(new Runnable() {								@Override				public void run() {										//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());				  	//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 					String result="";					page+=1;			        ACTION_MESSAGE=WHAT_DID_MORE;				    queryData(ACTION_MESSAGE);		     	    				}			}).start();					}			private void setMessageItems(JSONObject object)		  {			//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());		  	//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 		      try		      {		    		JSONArray array=object.getJSONArray("data");		    		navMenuIcons = getResources().obtainTypedArray(R.array.message_icons);		    		navMenuIcons2 = getResources().obtainTypedArray(R.array.message_read_icons);		  		for(int i=0;i<array.length() ;i++){		  				JSONObject jsonObject=array.getJSONObject(i);		  					if(jsonObject.getString("MSG007").equals("A")){		  							//if(jsonObject.getString("MSG012").equals("Y"))		  							//		msgItems.add(new MsgItem(jsonObject.getString("MSG001"),jsonObject.getString("MSG004"),jsonObject.getString("MSG008"),jsonObject.getString("MSG005"), navMenuIcons.getResourceId(0, -1),"A"));			  							//else		  								msgItems.add(new MsgItem(jsonObject.getString("MSG001"),jsonObject.getString("MSG004"),jsonObject.getString("MSG008"),jsonObject.getString("MSG005"), navMenuIcons2.getResourceId(0, -1),"A"));		  						}		  					else if(jsonObject.getString("MSG007").equals("B")){		  							//	if(jsonObject.getString("MSG012").equals("Y")) 		  										msgItems.add(new MsgItem(jsonObject.getString("MSG001"),jsonObject.getString("MSG004"),jsonObject.getString("MSG008"),jsonObject.getString("MSG005"), navMenuIcons.getResourceId(1, -1),"B"));	                			  								//else		  								//		msgItems.add(new MsgItem(jsonObject.getString("MSG001"),jsonObject.getString("MSG004"),jsonObject.getString("MSG008"),jsonObject.getString("MSG005"), navMenuIcons2.getResourceId(1, -1),"B"));		  						}		  					else if(jsonObject.getString("MSG007").equals("C")){		  							//if(jsonObject.getString("MSG012").equals("Y")) 		  							//	msgItems.add(new MsgItem(jsonObject.getString("MSG001"),jsonObject.getString("MSG004"),jsonObject.getString("MSG008"),jsonObject.getString("MSG005"), navMenuIcons.getResourceId(2, -1),"C"));	                			  							//else		  								msgItems.add(new MsgItem(jsonObject.getString("MSG001"),jsonObject.getString("MSG004"),jsonObject.getString("MSG008"),jsonObject.getString("MSG005"), navMenuIcons2.getResourceId(2, -1),"C"));		  					}		  					else if(jsonObject.getString("MSG007").equals("D")){		  							//if(jsonObject.getString("MSG012").equals("Y")) 		  							//	msgItems.add(new MsgItem(jsonObject.getString("MSG001"),jsonObject.getString("MSG004"),jsonObject.getString("MSG008"),jsonObject.getString("MSG005"), navMenuIcons.getResourceId(3, -1),"D"));	                			  						//	else		  								msgItems.add(new MsgItem(jsonObject.getString("MSG001"),jsonObject.getString("MSG004"),jsonObject.getString("MSG008"),jsonObject.getString("MSG005"), navMenuIcons2.getResourceId(3, -1),"D"));		  					}		  					else if(jsonObject.getString("MSG007").equals("E")){		  							//if(jsonObject.getString("MSG012").equals("Y")) 		  							//	msgItems.add(new MsgItem(jsonObject.getString("MSG001"),jsonObject.getString("MSG004"),jsonObject.getString("MSG008"),jsonObject.getString("MSG005"), navMenuIcons.getResourceId(4, -1),"E"));	                			  							//else		  								msgItems.add(new MsgItem(jsonObject.getString("MSG001"),jsonObject.getString("MSG004"),jsonObject.getString("MSG008"),jsonObject.getString("MSG005"), navMenuIcons2.getResourceId(4, -1),"E"));		  						}		  					else {	  						  								msgItems.add(new MsgItem(jsonObject.getString("MSG001"),jsonObject.getString("MSG004"),jsonObject.getString("MSG008"),jsonObject.getString("MSG005"), navMenuIcons2.getResourceId(4, -1),""));	  						}				}		  			      }		      catch (JSONException e)		      {		       e.printStackTrace();		    		      }		  }		 public void queryData(String url, IDataReceiveListener DataReceiveListener)		  {			 				//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());			  	//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 		    super.getRequest(url, DataReceiveListener);		  }		@Override		  public void loadData(Object result)		  {						//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());		  	//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 		    try		    {		      setMessageItems(new JSONObject((String)result));		      this.mPullDownView.notifyDidLoad();				isLoading=0;		      queryData(super.getWebServiceUrl() + "GetMSGUnreadCount?USERID=" + super.getLoginUser() + "&WWID=13145774WWGlobal999988msg", new IDataReceiveListener(){			    	@Override			    	public void onReceiveData(Object result)			    	  {			    	    	try			    	    		{			    	    			int cc = Integer.parseInt(new JSONObject((String)result).getString("GetMSGUnreadCountResult"));			    	    			initBadge(btnMsg,cc);			    	    		}			    	    	catch (JSONException e)			    	    			{			    	     		    	        e.printStackTrace();			    	    			}			    	  }			    });		    }		    catch (JSONException e)		    {		       e.printStackTrace();		    }		  }		  @Override		  public void loadMoreData(Object paramObject)		  {			  				//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());			  	//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 		    try		    {		      JSONObject localJSONObject = new JSONObject((String)paramObject);		      setMessageItems(localJSONObject);		      if (localJSONObject.getJSONArray("data").length() == 0)		       page +=1;		      this.mPullDownView.notifyDidMore();				    }		    catch (JSONException e)		    {		            e.printStackTrace();		    }		  }  @Override		  public void loadRefreshData(Object paramObject)		  {	  	  		//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());	  		//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 		    try		    {		      JSONObject localJSONObject = new JSONObject((String)paramObject);		      this.msgItems.clear();		      setMessageItems(localJSONObject);		      this.page = 1;		      this.mPullDownView.notifyDidRefresh();	       }		    catch (JSONException e)		    {		           e.printStackTrace();		    }		  }}