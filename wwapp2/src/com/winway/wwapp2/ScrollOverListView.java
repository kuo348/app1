package com.winway.wwapp2;import android.content.Context;import android.util.AttributeSet;import android.view.MotionEvent;import android.view.View;import android.widget.ListView;/** * <p>一個可以監聽ListView是否滾動到最頂部或最底部的自定義控件</p> * 只能監聽由觸摸產生的，如果是ListView本身Flying導致的，則不能監聽</br> * 如果加以改進，可以實現監聽scroll滾動的具體位置等 */public class ScrollOverListView extends ListView {		private int mLastY;	private int mTopPosition;	private int mBottomPosition;	public ScrollOverListView(Context context, AttributeSet attrs, int defStyle) {		super(context, attrs, defStyle);		init();	}	public ScrollOverListView(Context context, AttributeSet attrs) {		super(context, attrs);		init();	}	public ScrollOverListView(Context context) {		super(context);		init();	}	private void init(){						//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());		//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 		mTopPosition = 0;		mBottomPosition = 0;	}		@Override	public boolean onTouchEvent(MotionEvent ev) {						//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());		//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 		final int action = ev.getAction();		final int y = (int) ev.getRawY();				switch(action){			case MotionEvent.ACTION_DOWN:{				mLastY = y;				final boolean isHandled = mOnScrollOverListener.onMotionDown(ev);				if (isHandled) {					mLastY = y;					return isHandled;				}				break;			}						case MotionEvent.ACTION_MOVE:{				final int childCount = getChildCount();				if(childCount == 0) return super.onTouchEvent(ev);								final int itemCount = getAdapter().getCount() - mBottomPosition;								final int deltaY = y - mLastY;				//DLog.d("lastY=%d y=%d", mLastY, y);								final int firstTop = getChildAt(0).getTop();				final int listPadding = getListPaddingTop();								final int lastBottom = getChildAt(childCount - 1).getBottom();				final int end = getHeight() - getPaddingBottom();								final int firstVisiblePosition = getFirstVisiblePosition();								final boolean isHandleMotionMove = mOnScrollOverListener.onMotionMove(ev, deltaY);								if(isHandleMotionMove){					mLastY = y;					return true;				}								//DLog.d("firstVisiblePosition=%d firstTop=%d listPaddingTop=%d deltaY=%d", firstVisiblePosition, firstTop, listPadding, deltaY);				if (firstVisiblePosition <= mTopPosition && firstTop >= listPadding && deltaY > 0) {		            final boolean isHandleOnListViewTopAndPullDown;		            isHandleOnListViewTopAndPullDown = mOnScrollOverListener.onListViewTopAndPullDown(deltaY);		            if(isHandleOnListViewTopAndPullDown){		            	mLastY = y;			            return true;		            }		        }								// DLog.d("lastBottom=%d end=%d deltaY=%d", lastBottom, end, deltaY);		        if (firstVisiblePosition + childCount >= itemCount && lastBottom <= end && deltaY < 0) {		        	final boolean isHandleOnListViewBottomAndPullDown;		        	isHandleOnListViewBottomAndPullDown = mOnScrollOverListener.onListViewBottomAndPullUp(deltaY);		        	if(isHandleOnListViewBottomAndPullDown){		        		mLastY = y;		        		return true;		        	}		        }				break;			}						case MotionEvent.ACTION_UP:{				final boolean isHandlerMotionUp = mOnScrollOverListener.onMotionUp(ev);				if (isHandlerMotionUp) {					mLastY = y;					return true;				}				break;			}		}				mLastY = y;		return super.onTouchEvent(ev);	}			/**空的*/	private OnScrollOverListener mOnScrollOverListener = new OnScrollOverListener(){		@Override		public boolean onListViewTopAndPullDown(int delta) {									//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());			//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 			return false;		}		@Override		public boolean onListViewBottomAndPullUp(int delta) {									//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());			//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 			return false;		}		@Override		public boolean onMotionDown(MotionEvent ev) {									//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());			//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 			return false;		}		@Override		public boolean onMotionMove(MotionEvent ev, int delta) {						//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());			//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 			return false;		}		@Override		public boolean onMotionUp(MotionEvent ev) {						//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());			//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 			return false;		}			};								// =============================== public method ===============================	/**	 * 可以自定義其中一個項目為頭部，頭部觸發的事件將以這個為準，默認為第一個	 * 	 * @param index 正數第幾個，必須在項目數範圍之內	 */	public void setTopPosition(int index){						//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());		//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 		if(getAdapter() == null)			throw new NullPointerException("You must set adapter before setTopPosition!");		if(index < 0)			throw new IllegalArgumentException("Top position must > 0");				mTopPosition = index;	}		/**	 * 可以自定義其中一個項目為尾部，尾部觸發的事件將以這個為準，默認為最後一個	 * 	 * @param index 倒數第幾個，必須在項目數範圍之內	 */	public void setBottomPosition(int index){						//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());		//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 		if(getAdapter() == null)			throw new NullPointerException("You must set adapter before setBottonPosition!");		if(index < 0)			throw new IllegalArgumentException("Bottom position must > 0");				mBottomPosition = index;	}	/**	 * 設置這個Listener可以監聽是否到達頂端，或者是否到達低端等事件</br>	 * 	 * @see OnScrollOverListener	 */	public void setOnScrollOverListener(OnScrollOverListener onScrollOverListener){						//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());		//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 		mOnScrollOverListener = onScrollOverListener;	}		/**	 * 滾動監聽接口</br>	 * @see ScrollOverListView#setOnScrollOverListener(OnScrollOverListener)	 * 	 */	public interface OnScrollOverListener {				/**		 * 到達最頂部觸發		 * 		 * @param delta 手指點擊移動產生的偏移量		 * @return 		 */		boolean onListViewTopAndPullDown(int delta);		/**		 * 到達最底部觸發		 * 		 * @param delta 手指點擊移動產生的偏移量		 * @return 		 */		boolean onListViewBottomAndPullUp(int delta);				/**		 * 手指觸摸按下觸發，相當於{@link MotionEvent#ACTION_DOWN}		 * 		 * @return 返回true表示自己處理		 * @see View#onTouchEvent(MotionEvent)		 */		boolean onMotionDown(MotionEvent ev);				/**		 * 手指觸摸移動觸發，相當於{@link MotionEvent#ACTION_MOVE}		 * 		 * @return 返回true表示自己處理		 * @see View#onTouchEvent(MotionEvent)		 */		boolean onMotionMove(MotionEvent ev, int delta);				/**		 * 手指觸摸後提起觸發，相當於{@link MotionEvent#ACTION_UP} 		 * 		 * @return 返回true表示自己處理		 * @see View#onTouchEvent(MotionEvent)		 */		boolean onMotionUp(MotionEvent ev);			}}