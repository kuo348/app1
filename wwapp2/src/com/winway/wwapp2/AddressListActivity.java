package com.winway.wwapp2;/** * 通訊錄列表 *  *  */import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.List;import java.util.Map;import org.apache.http.HttpResponse;import org.apache.http.client.HttpClient;import org.apache.http.client.methods.HttpGet;import org.apache.http.impl.client.DefaultHttpClient;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import com.winway.wwapp2.PullDownView.OnPullDownListener;import android.annotation.SuppressLint;import android.app.ActionBar;import android.app.Fragment;import android.app.FragmentManager;import android.app.FragmentTransaction;import android.content.Context;import android.content.res.TypedArray;import android.os.AsyncTask;import android.os.Bundle;import android.util.Log;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.view.ViewGroup;import android.view.View.OnClickListener;import android.view.View.OnFocusChangeListener;import android.view.View.OnKeyListener;import android.view.View.OnTouchListener;import android.widget.AdapterView;import android.widget.Button;import android.widget.EditText;import android.widget.ListView;import android.widget.RelativeLayout;import android.widget.Toast;import android.widget.AdapterView.OnItemClickListener;public class AddressListActivity extends BaseFragment implements OnPullDownListener, OnItemClickListener {	private Context context ;	private Bundle bundle;	private View mView=null;	private int ACTION_MESSAGE;	private AddressListAdapter adapter2;	private ArrayList<AddressItem> addressItems;	private PullDownView mPullDownView;	protected static final int REFRESH_DATA = 0x00000002;	private static final int WHAT_DID_LOAD_DATA = 0;	private static final int WHAT_DID_REFRESH = 1;	private static final int WHAT_DID_MORE = 5;	private Button btnCancel=null;	private Button btnCancel2=null;	private String strSearchText="";	private EditText searchEdit;	private RelativeLayout r1,r2;	private int page=1;	private ListView lstAddress;	private String ocd01;	@Override	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {				//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());
		//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 				return initView(inflater, container);	}	private View initView(LayoutInflater inflater, ViewGroup container) {				//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());
		//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 				View view = inflater.inflate(R.layout.actaddresslist, container, false);		context = view.getContext();		bundle =this.getArguments();        ocd01=bundle.getString("cust_no");        btnCancel=(Button) view.findViewById(R.id.btn_cancel);		if(btnCancel!=null){			btnCancel.setOnClickListener(new OnClickListener() {		         public void onClick(View v) {                    closeFragment();			        }			    });					}		btnCancel2=(Button)view.findViewById(R.id.btn_address_cancel);		r1=(RelativeLayout)view.findViewById(R.id.address_r1);		r2=(RelativeLayout)view.findViewById(R.id.address_r2);		searchEdit=(EditText)view.findViewById(R.id.address_search_text);		btnCancel2.setOnClickListener(new View.OnClickListener(){			@Override			public void onClick(View v){								//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());				//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 		   						if(r1.getVisibility()!=View.VISIBLE)				{					r1.setVisibility(View.VISIBLE);									}				if(btnCancel2.getVisibility()==View.VISIBLE)				{					btnCancel2.setVisibility(View.GONE);					searchEdit.setFocusable(false);					searchEdit.setFocusableInTouchMode(false);					searchEdit.setClickable(false);				}			}		});		searchEdit.setOnClickListener(new View.OnClickListener(){			@Override			public void onClick(View v){		   						if(btnCancel2.getVisibility()!=View.VISIBLE)				{					btnCancel2.setVisibility(View.VISIBLE);					}				if(r1.getVisibility()==View.VISIBLE)				{					r1.setVisibility(View.GONE);									}			}		});		searchEdit.setOnTouchListener(new OnTouchListener() {		    @Override		    public boolean onTouch(View v, MotionEvent event) {               if (event.getAction() == MotionEvent.ACTION_UP) {		            		        }		        return false;		    }		});		searchEdit.setOnFocusChangeListener(new OnFocusChangeListener() {		    @Override		    public void onFocusChange(View v, boolean hasFocus) {		        if (hasFocus) {		        	if(btnCancel2.getVisibility()!=View.VISIBLE)					{						btnCancel2.setVisibility(View.VISIBLE);						}					if(r1.getVisibility()==View.VISIBLE)					{						r1.setVisibility(View.GONE);										}		        } else {		           		        }		    }		});		searchEdit.setOnKeyListener(new OnKeyListener() {		    public boolean onKey(View v, int keyCode, KeyEvent event) {		    			    	//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());				//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 		   				        // If the event is a key-down event on the "enter" button		    	if ((event.getAction() == 0) && (keyCode== 66))				{		          // Perform action on key press		        	page=1;			        strSearchText=searchEdit.getText().toString();			    	queryData(WHAT_DID_LOAD_DATA);		        // return true;		        }		        return false;		    }		});        initPullDownView(view);        queryData(WHAT_DID_LOAD_DATA);		return view;	}	/*private String getLoginUser()	{		return super.getConfig(getActivity(),"Config","LoginUser","");			}*/	private void queryData(int Message)	{					//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());
			//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 						String json="";				   //  String url="http://59.125.146.7:8080/APQPService/GetMsgList?USERID=mis&PAGE="+Integer.toString(page)+"&WWID=13145774WWGlobal999988msg";			 String url="http://59.125.146.7:8080/APQPService/openWindow1Address";		     JSONObject jsonObject = new JSONObject();		     JSONObject data=new JSONObject();	         try {	        	   data.accumulate("condition", strSearchText);	        	   data.accumulate("conditionAddressOCD01", ocd01);				   jsonObject.accumulate("userid",this.getLoginUser());				   jsonObject.accumulate("WWID", "13145774WWGlobal999988owquery999");				   jsonObject.accumulate("data", data);				   jsonObject.accumulate("page",page);				   super.postRequest(url,jsonObject,Message);				   			} catch (JSONException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}			}	@Override	  public void loadData(Object result)	  {				//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());
		//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 				try {			JSONObject jsonObject=new JSONObject((String)result);			addressItems.clear();			setAddressItems(jsonObject);			mPullDownView.notifyDidLoad();			}		catch (JSONException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}			  	  }	@Override	  public void loadRefreshData(Object result)	  {				//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());
		//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 				try {			JSONObject jsonObject=new JSONObject((String)result);			addressItems.clear();			setAddressItems(jsonObject);			page=1;			mPullDownView.notifyDidRefresh();			}		catch (JSONException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}			  	  }		@Override	  public void loadMoreData(Object result)	  {		//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());
		//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 					try {				JSONObject jsonObject=new JSONObject((String)result);				setAddressItems(jsonObject);				JSONArray array=jsonObject.getJSONArray("data");				if(array.length()==0){					page=page-1;						}				mPullDownView.notifyDidMore();				}			catch (JSONException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}			  	  }	private void setAddressItems(JSONObject jsonObject)	{		//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());
		//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 				try {			JSONArray array=jsonObject.getJSONArray("data");			if(array.length()>0){			for(int i=0;i<array.length() ;i++){				JSONObject obj;				obj = array.getJSONObject(i);					addressItems.add(new AddressItem(obj.getString("ocd228"),obj.getString("ocd221")));			      }			adapter2.notifyDataSetChanged();			}		   } catch (JSONException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}			}	  @Override		public void onRefresh() {		  		//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());
		//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 		  			// TODO Auto-generated method stub	new Thread(new Runnable() {				@Override				public void run() {					//String result="";									queryData(WHAT_DID_REFRESH);    									}			}).start();		}		@Override		public void onMore() {			// TODO Auto-generated method stub	new Thread(new Runnable() {						@Override				public void run() {//進入點					//String result="";					page+=1;					queryData(WHAT_DID_MORE);    			      	     									}			}).start();					}		private void initPullDownView(View view)		{			//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());
			//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 						/* 下拉刷新 上拉加載更多			 * 1.使用PullDownView			 * 2.設置OnPullDownListener			 * 3.從mPullDownView里面獲取ListView			 */					mPullDownView = (PullDownView) view.findViewById(R.id.addresslistview);			if(mPullDownView==null) return ;			mPullDownView.setOnPullDownListener(this);			lstAddress = mPullDownView.getListView();					lstAddress.setOnItemClickListener(this);			/*ColorDrawable cd=new ColorDrawable(R.color.red);			lstAddress.setDivider(cd);			lstAddress.setChoiceMode(ListView.CHOICE_MODE_SINGLE);*/			lstAddress.setDividerHeight(0);			lstAddress.setHeaderDividersEnabled(true);			//adapter2 = new SimpleAdapter(context,mStrings,R.layout.pulldown_item,new String[]{"title","content"},new int[] {R.id.msg_title2,R.id.msg_content} );		     addressItems = new ArrayList<AddressItem>();			 adapter2 = new AddressListAdapter(context,addressItems);			 lstAddress.setAdapter(adapter2);		     mPullDownView.enableAutoFetchMore(true, 1);					}		@Override		public void onItemClick(AdapterView<?> parent, View view, int position,				long id) {						//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());
			//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 						   final AddressItem item = (AddressItem ) addressItems.get(position);			   			   FragmentManager fm=getFragmentManager();			   Fragment fraagment=fm.findFragmentByTag("apqpdata");			   EditText xa012=(EditText)fraagment.getView().findViewById(R.id.xa012);			   if(xa012!=null){				   xa012.setText(item.getAddress());			   }			   closeFragment();			   // Bundle bundle = new Bundle();				//bundle.putString("xa517", item.getEmpNo());			    //((MainActivity) getActivity()).callApqpDataActivity(bundle);					}			    /**	     * 關閉目前的Fragment，叫出最後一次背景堆疊的Fragment	    */		private void closeFragment()		{			//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());
			//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 						 FragmentManager fm=getFragmentManager();        	 fm.beginTransaction().remove(fm.findFragmentByTag("Address")).commit();        	 fm.popBackStack();//將back stack(背景堆疊)中最後一次的fragment轉換彈出        	 fm.beginTransaction().show(fm.findFragmentByTag("apqpdata")).commit();  					}}