package com.winway.wwapp2;import java.util.ArrayList;import java.util.List;import java.util.Map;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import com.winway.wwapp2.PullDownView.OnPullDownListener;import android.app.Fragment;import android.app.FragmentManager;import android.content.Context;import android.content.res.TypedArray;import android.graphics.drawable.ColorDrawable;import android.os.Bundle;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.view.ViewGroup;import android.view.View.OnClickListener;import android.view.View.OnFocusChangeListener;import android.view.View.OnKeyListener;import android.view.View.OnTouchListener;import android.view.inputmethod.InputMethodManager;import android.widget.AdapterView;import android.widget.Button;import android.widget.CheckBox;import android.widget.EditText;import android.widget.ImageView;import android.widget.ListView;import android.widget.RelativeLayout;import android.widget.TableLayout;import android.widget.AdapterView.OnItemClickListener;public class CSListActivity extends BaseFragment implements OnPullDownListener, OnItemClickListener {	private Context context ;	private Bundle bundle;	private View mView=null;	private int ACTION_MESSAGE;	private CSListAdapter adapter2;	private ArrayList<CSItem> csItems;	private PullDownView mPullDownView;    private List<Map<String,String>> mStrings = new ArrayList<Map<String,String>>();	protected static final int REFRESH_DATA = 0x00000002;	private static final int WHAT_DID_LOAD_DATA = 0;	private static final int WHAT_DID_REFRESH = 1;	private static final int WHAT_DID_MORE = 5;	private Button btnCancel=null;	private Button btnCancel2=null;	private String strSearchText="";	private EditText searchEdit;	private Fragment parentFragment=null;	private int page=1;	private ListView lstCS;	private RelativeLayout r1,r2;		@Override		public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {										   					return initView(inflater, container);		}		private View initView(LayoutInflater inflater, ViewGroup container) {			View view = inflater.inflate(R.layout.actcslist, container, false);			context = view.getContext();			//bundle =this.getArguments();			btnCancel=(Button) view.findViewById(R.id.btn_cancel);			if(btnCancel!=null){				btnCancel.setOnClickListener(new OnClickListener() {			         public void onClick(View v) {                        closeFragment();				        }				    });							}			btnCancel2=(Button)view.findViewById(R.id.btn_cs_cancel);			r1=(RelativeLayout)view.findViewById(R.id.cs_r1);			r2=(RelativeLayout)view.findViewById(R.id.cs_r2);			searchEdit=(EditText)view.findViewById(R.id.cs_search_text);			btnCancel2.setOnClickListener(new View.OnClickListener(){				@Override				public void onClick(View v){										//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());					//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 			   							if(r1.getVisibility()!=View.VISIBLE)					{						r1.setVisibility(View.VISIBLE);										}					if(btnCancel2.getVisibility()==View.VISIBLE)					{						btnCancel2.setVisibility(View.GONE);						searchEdit.setFocusable(false);						searchEdit.setFocusableInTouchMode(false);						searchEdit.setClickable(false);					}				}			});			searchEdit.setOnClickListener(new View.OnClickListener(){				@Override				public void onClick(View v){			   							if(btnCancel2.getVisibility()!=View.VISIBLE)					{						btnCancel2.setVisibility(View.VISIBLE);						}					if(r1.getVisibility()==View.VISIBLE)					{						r1.setVisibility(View.GONE);										}				}			});			searchEdit.setOnTouchListener(new OnTouchListener() {			    @Override			    public boolean onTouch(View v, MotionEvent event) {                   if (event.getAction() == MotionEvent.ACTION_UP) {			            			        }			        return false;			    }			});			searchEdit.setOnFocusChangeListener(new OnFocusChangeListener() {			    @Override			    public void onFocusChange(View v, boolean hasFocus) {			        if (hasFocus) {			        	if(btnCancel2.getVisibility()!=View.VISIBLE)						{							btnCancel2.setVisibility(View.VISIBLE);							}						if(r1.getVisibility()==View.VISIBLE)						{							r1.setVisibility(View.GONE);											}			        } else {			           			        }			    }			});			searchEdit.setOnKeyListener(new OnKeyListener() {			    public boolean onKey(View v, int keyCode, KeyEvent event) {			    				    	//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());					//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 			   					        // If the event is a key-down event on the "enter" button			    	if ((event.getAction() == 0) && (keyCode== 66))					{			          // Perform action on key press			        	page=1;				        strSearchText=searchEdit.getText().toString();				    	queryData(WHAT_DID_LOAD_DATA);			        // return true;			        }			        return false;			    }			});			initPullDownView(view);			queryData(WHAT_DID_LOAD_DATA);			return view;		}		public void setParent(Fragment f)		{							   					this.parentFragment =f;			}	/*	private String getLoginUser()		{			return super.getConfig(getActivity(),"Config","LoginUser","");				}*/		private void queryData(int Message)		{							   					 String json="";					   //  String url="http://59.125.146.7:8080/APQPService/GetMsgList?USERID=mis&PAGE="+Integer.toString(page)+"&WWID=13145774WWGlobal999988msg";				 String url="http://59.125.146.7:8080/APQPService/openWindow1CS";			     JSONObject jsonObject = new JSONObject();			     JSONObject data=new JSONObject();		         try {		        	   data.accumulate("condition", strSearchText);					   jsonObject.accumulate("userid",this.getLoginUser());					   jsonObject.accumulate("WWID", "13145774WWGlobal999988owquery999");					   jsonObject.accumulate("data", data);					   jsonObject.accumulate("page",page);					   super.postRequest(url,jsonObject,Message);					   				} catch (JSONException e) {					// TODO Auto-generated catch block					e.printStackTrace();				}					}						@Override		  public void loadData(Object result)		  {										   								try {				JSONObject jsonObject=new JSONObject((String)result);				setCSItems(jsonObject);				mPullDownView.notifyDidLoad();				}			catch (JSONException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}				  		  }		@Override		  public void loadRefreshData(Object result)		  {										   					try {				JSONObject jsonObject=new JSONObject((String)result);				csItems.clear();				setCSItems(jsonObject);				page=1;				mPullDownView.notifyDidRefresh();				}			catch (JSONException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}				  		  }			@Override		  public void loadMoreData(Object result)		  {							   						try {					JSONObject jsonObject=new JSONObject((String)result);					setCSItems(jsonObject);					JSONArray array=jsonObject.getJSONArray("data");					if(array.length()==0){						page=page-1;							}					mPullDownView.notifyDidMore();					}				catch (JSONException e) {					// TODO Auto-generated catch block					e.printStackTrace();				}				  		  }		private void setCSItems(JSONObject jsonObject)		{						try {				csItems.clear();				JSONArray array=jsonObject.getJSONArray("data");				if(array.length()>0){				for(int i=0;i<array.length() ;i++){					JSONObject obj;					obj = array.getJSONObject(i);						csItems.add(new CSItem(obj.getString("YD001"),obj.getString("YD002")));	    		      }				adapter2.notifyDataSetChanged();				}			   } catch (JSONException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}					}		  @Override			public void onRefresh() {			  			  						   						// TODO Auto-generated method stub		new Thread(new Runnable() {					@Override					public void run() {																						   								//String result="";										queryData(WHAT_DID_REFRESH);    											}				}).start();			}			@Override			public void onMore() {														   						// TODO Auto-generated method stub		new Thread(new Runnable() {							@Override					public void run() {																						   								//String result="";						page+=1;						queryData(WHAT_DID_MORE);    				      	     											}				}).start();							}			private void initPullDownView(View view)			{														   						/*				 * 1.使用PullDownView				 * 2.設置OnPullDownListener				 * 3.從mPullDownView里面獲取ListView				 */							mPullDownView = (PullDownView) view.findViewById(R.id.cslistview);				if(mPullDownView==null) return ;				mPullDownView.setOnPullDownListener(this);				lstCS = mPullDownView.getListView();						lstCS.setOnItemClickListener(this);				/*ColorDrawable cd=new ColorDrawable(R.color.red);				lstCS.setDivider(cd);				lstCS.setChoiceMode(ListView.CHOICE_MODE_SINGLE);*/				lstCS.setDividerHeight(0);				lstCS.setHeaderDividersEnabled(true);				//adapter2 = new SimpleAdapter(context,mStrings,R.layout.pulldown_item,new String[]{"title","content"},new int[] {R.id.msg_title2,R.id.msg_content} );			     csItems = new ArrayList<CSItem>();				 adapter2 = new CSListAdapter(context,csItems);				 lstCS.setAdapter(adapter2);			     mPullDownView.enableAutoFetchMore(true, 1);							}			@Override			public void onItemClick(AdapterView<?> parent, View view, int position,					long id) {														   						   final CSItem item = (CSItem ) csItems.get(position);				   				   FragmentManager fm=getFragmentManager();				   Fragment fraagment=fm.findFragmentByTag("apqpdata");				   EditText xa517=(EditText)fraagment.getView().findViewById(R.id.xa517);				   if(xa517!=null){					   xa517.setText(item.getEmpNo());				   }				   closeFragment();				   // Bundle bundle = new Bundle();					//bundle.putString("xa517", item.getEmpNo());				    //((MainActivity) getActivity()).callApqpDataArctivity(bundle);							}			private void closeFragment()			{				 FragmentManager fm=getFragmentManager();	        	 fm.beginTransaction().remove(fm.findFragmentByTag("CS")).commit();	        	 fm.popBackStack();	        	 if(parentFragment!=null){	        		 fm.beginTransaction().show(parentFragment).commit();	        	 }	        	 else {	        		 fm.beginTransaction().show(fm.findFragmentByTag("apqpdata")).commit();	        	 }							}}