package com.winway.wwapp2;import java.text.SimpleDateFormat;import java.util.Date;import java.util.Timer;import java.util.TimerTask;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import android.content.Context;import android.os.Handler;import android.os.Message;import android.util.AttributeSet;import android.util.Log;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.view.animation.Animation;import android.view.animation.RotateAnimation;import android.widget.AbsListView;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.ListView;import android.widget.SimpleAdapter;import android.widget.TextView;import com.winway.wwapp2.ScrollOverListView.OnScrollOverListener;/** * 下拉刷新控件</br> * 真正實現下拉刷新的是這個控件， * ScrollOverListView只是提供觸摸的事件等 */public class PullDownView extends LinearLayout implements OnScrollOverListener{	private static final String TAG = "PullDownView";		private static final int START_PULL_DEVIATION = 50;	// 移動誤差	private static final int AUTO_INCREMENTAL = 10;		// 自增量，用於回彈	private int mCurrentStatus;	private static final int WHAT_DID_LOAD_DATA = 1;	// Handler what 數據加載完畢	private static final int WHAT_ON_REFRESH = 2;		// Handler what 刷新中	private static final int WHAT_DID_REFRESH = 3;		// Handler what 已經刷新完	private static final int WHAT_SET_HEADER_HEIGHT = 4;// Handler what 設置高度	private static final int WHAT_DID_MORE = 5;			// Handler what 已經獲取完更多	private static final int DEFAULT_HEADER_VIEW_HEIGHT = 105;	// 頭部文件原本的高度	private int state=0;	private static SimpleDateFormat dateFormat = new SimpleDateFormat("MM-dd HH:mm");		private View mHeaderView;	private LayoutParams mHeaderViewParams;		private TextView mHeaderViewDateView;	private TextView mHeaderTextView;	private ImageView mHeaderArrowView;	private View mHeaderLoadingView;	private View mFooterView;	private TextView mFooterTextView;	private View mFooterLoadingView;	private ScrollOverListView mListView;		private OnPullDownListener mOnPullDownListener;	private RotateAnimation mRotateOTo180Animation;	private RotateAnimation mRotate180To0Animation;		private int mHeaderIncremental;	// 增量	private float mMotionDownLastY;	// 按下時候的Y軸坐標		private boolean mIsDown;			// 是否按下	private boolean mIsRefreshing;		// 是否下拉刷新中	private boolean mIsFetchMoreing;	// 是否獲取更多中	private boolean mIsPullUpDone;		// 是否回推完成	private boolean mEnableAutoFetchMore;	// 是否允許自動獲取更多		// 頭部文件的狀態	private static final int HEADER_VIEW_STATE_IDLE = 0;			// 空閑	private static final int HEADER_VIEW_STATE_NOT_OVER_HEIGHT = 1;	// 沒有超過默認高度	private static final int HEADER_VIEW_STATE_OVER_HEIGHT = 2;		// 超過默認高度	private int mHeaderViewState = HEADER_VIEW_STATE_IDLE;	public PullDownView(Context context, AttributeSet attrs) {		super(context, attrs);		initHeaderViewAndFooterViewAndListView(context);	}	public PullDownView(Context context) {		super(context);		initHeaderViewAndFooterViewAndListView(context);	}		/*	 * ==================================	 * Public method	 * 外部使用，具體就是用這幾個就可以了	 * 	 * ==================================	 */		/**	 * 刷新事件接口	 */	public interface OnPullDownListener {		void onRefresh();		void onMore();	}		/**	 * 通知加載完了數據，要放在Adapter.notifyDataSetChanged後面	 * 當你加載完數據的時候，調用這個notifyDidLoad()	 * 才會隱藏頭部，並初始化數據等	 */	public void notifyDidLoad() {						//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());		//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 		mUIHandler.sendEmptyMessage(WHAT_DID_LOAD_DATA);	}		/**	 * 通知已經刷新完了，要放在Adapter.notifyDataSetChanged後面	 * 當你執行完刷新任務之後，調用這個notifyDidRefresh()	 * 才會隱藏掉頭部文件等操作	 */	public void notifyDidRefresh() {						//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());		//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 		mUIHandler.sendEmptyMessage(WHAT_DID_REFRESH);	}	/*	 * 通知已經獲取完更多了，要放在Adapter.notifyDataSetChanged後面	 * 當你執行完更多任務之後，調用這個notyfyDidMore()	 * 才會隱藏加載圈等操作	 */	public void notifyDidMore() {						//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());		//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 		mUIHandler.sendEmptyMessage(WHAT_DID_MORE);	}	/**	 * 設置監聽器	 * @param listener	 */	public void setOnPullDownListener(OnPullDownListener listener){						//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());		//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 		mOnPullDownListener = listener;	}	/**	 * 獲取內嵌的listview	 * @return ScrollOverListView	 */	public ListView getListView(){						//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());		//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 		return mListView;	}	/**	 * 是否開啟自動獲取更多	 * 自動獲取更多，將會隱藏footer，並在到達底部的時候自動刷新	 * @param index 倒數第幾個觸發	 */	public void enableAutoFetchMore(boolean enable, int index){						//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());		//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 		mEnableAutoFetchMore=enable;		if(enable){			mListView.setBottomPosition(index);			mFooterLoadingView.setVisibility(View.GONE);					}else{			mFooterTextView.setText("more");			mFooterLoadingView.setVisibility(View.VISIBLE);		}			}		/*	 * ==================================	 * Private method	 * 具體實現下拉刷新等操作	 * 	 * ==================================	 */		/**	 * 初始化界面	 */	@SuppressWarnings("deprecation")	private void initHeaderViewAndFooterViewAndListView(Context context){				//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());		//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 		setOrientation(LinearLayout.VERTICAL);		//setDrawingCacheEnabled(false);		/*		 * 自定義Header		 * 放在這里是因為考慮到很多界面都需要使用		 * 如果要修改，和它相關的設置都要更改		 */		mHeaderView = LayoutInflater.from(context).inflate(R.layout.pulldown_header, null);		mHeaderViewParams = new LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);		addView(mHeaderView, 0, mHeaderViewParams);				mHeaderTextView = (TextView) mHeaderView.findViewById(R.id.pulldown_header_text);		mHeaderArrowView = (ImageView) mHeaderView.findViewById(R.id.pulldown_header_arrow);		mHeaderLoadingView = mHeaderView.findViewById(R.id.pulldown_header_loading);				// 註意，圖片旋轉之後，再執行旋轉，坐標會重新開始計算		mRotateOTo180Animation = new RotateAnimation(0, 180, 				Animation.RELATIVE_TO_SELF, 0.5f, 				Animation.RELATIVE_TO_SELF, 0.5f);		mRotateOTo180Animation.setDuration(250);		mRotateOTo180Animation.setFillAfter(true);				mRotate180To0Animation = new RotateAnimation(180, 0, 				Animation.RELATIVE_TO_SELF, 0.5f, 				Animation.RELATIVE_TO_SELF, 0.5f);		mRotate180To0Animation.setDuration(250);		mRotate180To0Animation.setFillAfter(true);				/**		 * 自定義footer		 */		mFooterView = LayoutInflater.from(context).inflate(R.layout.pulldown_footer, null);		mFooterTextView = (TextView) mFooterView.findViewById(R.id.pulldown_footer_text);		mFooterLoadingView = mFooterView.findViewById(R.id.pulldown_footer_loading);		mFooterView.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				if(!mIsFetchMoreing){					mIsFetchMoreing = true;					mFooterLoadingView.setVisibility(View.VISIBLE);					mOnPullDownListener.onMore();				}			}		});				/*		 * ScrollOverListView 同樣是考慮到都是使用，所以放在這里		 * 同時因為，需要它的監聽事件		 */		mListView = new ScrollOverListView(context);		mListView.setOnScrollOverListener(this);		mListView.setCacheColorHint(0);		addView(mListView, LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);				// 空的listener		mOnPullDownListener = new OnPullDownListener() {			@Override			public void onRefresh() {}			@Override			public void onMore() {}		};	}		/**	 * 在Dropdown和pullover的時候檢查頭部文件的狀態</br>	 * 如果超過了默認高度，就顯示release可以刷新，	 * 否則顯示下拉可以刷新	 */	private void checkHeaderViewState(){				//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());		//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 		if(mHeaderViewParams.height >= DEFAULT_HEADER_VIEW_HEIGHT){			if(mHeaderViewState == HEADER_VIEW_STATE_OVER_HEIGHT) return;			mHeaderViewState = HEADER_VIEW_STATE_OVER_HEIGHT;			mHeaderTextView.setText("release to refresh");			mHeaderArrowView.startAnimation(mRotateOTo180Animation);		}else{			if(mHeaderViewState == HEADER_VIEW_STATE_NOT_OVER_HEIGHT					|| mHeaderViewState == HEADER_VIEW_STATE_IDLE) return;			mHeaderViewState = HEADER_VIEW_STATE_NOT_OVER_HEIGHT;			mHeaderTextView.setText("Dropdown to refresh");			mHeaderArrowView.startAnimation(mRotate180To0Animation);		}	}		private void setHeaderHeight(final int height){						//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());		//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 				mHeaderIncremental = height;		mHeaderViewParams.height = height;		mHeaderView.setLayoutParams(mHeaderViewParams);	}		/**	 * 自動隱藏動畫	 */	class HideHeaderViewTask extends TimerTask{		@Override		public void run() {									//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());			//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 			if(mIsDown) {				cancel();				return;			}			mHeaderIncremental -= AUTO_INCREMENTAL;			if(mHeaderIncremental > 0){				mUIHandler.sendEmptyMessage(WHAT_SET_HEADER_HEIGHT);			}else{				mHeaderIncremental = 0;				mUIHandler.sendEmptyMessage(WHAT_SET_HEADER_HEIGHT);				cancel();			}		}	}		/**	 * 自動顯示動畫	 */	class ShowHeaderViewTask extends TimerTask{		@Override		public void run() {									//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());			//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 			if(mIsDown) {				cancel();				return;			}			mHeaderIncremental -= AUTO_INCREMENTAL;			if(mHeaderIncremental > DEFAULT_HEADER_VIEW_HEIGHT){				mUIHandler.sendEmptyMessage(WHAT_SET_HEADER_HEIGHT);			}else{				mHeaderIncremental = DEFAULT_HEADER_VIEW_HEIGHT;				mUIHandler.sendEmptyMessage(WHAT_SET_HEADER_HEIGHT);				if(!mIsRefreshing){					mIsRefreshing = true;					mUIHandler.sendEmptyMessage(WHAT_ON_REFRESH);				}				cancel();			}		}	}	private Handler mUIHandler = new Handler(){		@Override		public void handleMessage(Message msg) {									//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());			//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 						switch (msg.what) {				case WHAT_DID_LOAD_DATA:{					mCurrentStatus=WHAT_DID_LOAD_DATA;					mHeaderViewParams.height = 0;					mHeaderLoadingView.setVisibility(View.GONE);					mHeaderTextView.setText("Dropdown to refresh");					mHeaderViewDateView = (TextView) mHeaderView.findViewById(R.id.pulldown_header_date);					mHeaderViewDateView.setVisibility(View.VISIBLE);					mHeaderViewDateView.setText("Load ：" + dateFormat.format(new Date(System.currentTimeMillis())));					mHeaderArrowView.setVisibility(View.VISIBLE);						//showFooterView();					if(isFillScreenItem())						  showFooterView();					else 						  disableFooterView();					return;				}							case WHAT_ON_REFRESH:{					// 要清除掉動畫，否則無法隱藏					mCurrentStatus=WHAT_DID_LOAD_DATA;					mHeaderArrowView.clearAnimation();					mHeaderArrowView.setVisibility(View.INVISIBLE);					mHeaderLoadingView.setVisibility(View.VISIBLE);					mOnPullDownListener.onRefresh();										return;				}								case WHAT_DID_REFRESH :{					mCurrentStatus=WHAT_DID_REFRESH;					mIsRefreshing = false;					mHeaderViewState = HEADER_VIEW_STATE_IDLE;					mHeaderArrowView.setVisibility(View.VISIBLE);					mHeaderLoadingView.setVisibility(View.GONE);					mHeaderViewDateView.setText("refresh：" + dateFormat.format(new Date(System.currentTimeMillis())));					setHeaderHeight(0);						showFooterView();					/*if(isFillScreenItem())					  showFooterView();					else 					  disableFooterView();*/					return;				}								case WHAT_SET_HEADER_HEIGHT :{					setHeaderHeight(mHeaderIncremental);					return;				}								case WHAT_DID_MORE :{					mCurrentStatus=WHAT_DID_MORE;					mIsFetchMoreing = false;				    mFooterTextView.setText("More");					mFooterLoadingView.setVisibility(View.GONE);					if(msg.obj==null) {						disableFooterView();							return;					}					try {						JSONObject jsonObj=new JSONObject((String)msg.obj);						JSONArray data=jsonObj.getJSONArray("data");						if(data!=null&&data.length()==0){							disableFooterView();												}						else {							 showFooterView();						}					} catch (JSONException e) {						// TODO Auto-generated catch block						e.printStackTrace();					}															 					/*if(isFillScreenItem())						showFooterView();					else 						disableFooterView();*/         		}			}		}			};		/**	 * 顯示Footer	 */	private void showFooterView(){						//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());		//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 		if(mListView.getFooterViewsCount() == 0 && isFillScreenItem()){			mListView.addFooterView(mFooterView);			mListView.setAdapter(mListView.getAdapter());		}	}	private void disableFooterView(){						//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());		//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 		if(mListView.getFooterViewsCount() > 0 && isFillScreenItem()==false){			mListView.removeFooterView(mFooterView);					}	}	/**	 * 項目是否填滿整個屏幕	 */	private boolean isFillScreenItem(){						//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());		//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 		final int firstVisiblePosition = mListView.getFirstVisiblePosition();		final int lastVisiblePostion = mListView.getLastVisiblePosition() - mListView.getFooterViewsCount();		final int visibleItemCount = lastVisiblePostion - firstVisiblePosition + 1;		final int totalItemCount = mListView.getCount()- mListView.getFooterViewsCount();		/*final int totalItemCount=mListView.getCount();		final int lastVisiblePostion = mListView.getLastVisiblePosition() - mListView.getFooterViewsCount();		final int visibleItemCount =  = lastVisiblePostion - firstVisiblePosition + 1;*/		if(totalItemCount > visibleItemCount) return true;		return false;	}		/*	 * ==================================	 * 實現 OnScrollOverListener接口	 * 	 * 	 * ==================================	 */	@Override	public boolean onListViewTopAndPullDown(int delta) {						//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());		//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 		if(mIsRefreshing || mListView.getCount() - mListView.getFooterViewsCount() == 0) return false;				int absDelta = Math.abs(delta);		final int i = (int) Math.ceil((double)absDelta / 2);				mHeaderIncremental += i;		if(mHeaderIncremental >= 0){ // && mIncremental <= mMaxHeight			setHeaderHeight(mHeaderIncremental);			checkHeaderViewState();		}		return true;	}	@Override	public boolean onListViewBottomAndPullUp(int delta) {						//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());		//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 		if(!mEnableAutoFetchMore || mIsFetchMoreing) return false;		// 數量充滿螢幕才觸發		if(isFillScreenItem()){			mIsFetchMoreing = true;			mFooterTextView.setText("Load more...");			mFooterLoadingView.setVisibility(View.VISIBLE);			mOnPullDownListener.onMore();			return true;		}		return false;	}	@Override	public boolean onMotionDown(MotionEvent ev) {						//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());		//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 		mIsDown = true;		mIsPullUpDone = false;		mMotionDownLastY = ev.getRawY();		return false;	}	@Override	public boolean onMotionMove(MotionEvent ev, int delta) {						//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());		//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 		//當Header回推消失的時候，不允許滾動		if(mIsPullUpDone) return true;				// 如果開始按下到滑動距離不超過誤差值，則不滑動		final int absMotionY = (int) Math.abs(ev.getRawY() - mMotionDownLastY);		if(absMotionY < START_PULL_DEVIATION) return true;				final int absDelta = Math.abs(delta);		final int i = (int) Math.ceil((double)absDelta / 2);				// onTopDown在Top，並上回推和onTopUp相對		if(mHeaderViewParams.height > 0 && delta < 0){			mHeaderIncremental -= i;			if(mHeaderIncremental > 0){				setHeaderHeight(mHeaderIncremental);				checkHeaderViewState();			}else{				mHeaderViewState = HEADER_VIEW_STATE_IDLE;				mHeaderIncremental = 0;				setHeaderHeight(mHeaderIncremental);				mIsPullUpDone = true;			}			return true;		}		return false;	}	@Override	public boolean onMotionUp(MotionEvent ev) {						//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());		//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 		mIsDown = false;		// 避免和點擊事件衝突		if(mHeaderViewParams.height > 0){			// 判斷Header拉動的距離與設定的高度，小了就隱藏，多了就固定高度			int x = mHeaderIncremental - DEFAULT_HEADER_VIEW_HEIGHT;			Timer timer = new Timer(true);			if(x < 0){				timer.scheduleAtFixedRate(new HideHeaderViewTask(), 0, 10);			}else{				timer.scheduleAtFixedRate(new ShowHeaderViewTask(), 0, 10);			}			return true;		}		return false;	}	/*	 *  實作當推到底部時自動更新	 * */	public void onScroll(ListView lw, final int firstVisibleItem,	                 final int visibleItemCount, final int totalItemCount) {						//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());		//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 	        /*final int lastItem = firstVisibleItem + visibleItemCount;	           if(lastItem == totalItemCount&&this.mEnableAutoFetchMore==true) {	        	   mIsFetchMoreing = true;	   			   mFooterTextView.setText("Load more...");	   			   mFooterLoadingView.setVisibility(View.VISIBLE);	   			   mOnPullDownListener.onMore();	           }*/		if (mFooterView == null || mMotionDownLastY >= 0 || mCurrentStatus == WHAT_DID_LOAD_DATA  	            || mCurrentStatus ==WHAT_ON_REFRESH) {  	        return;  	    }  	  	    loadmore();	}	private void loadmore() {  						//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());		//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 	    if (isShowFooterView()) {  	    	   mIsFetchMoreing = true; 			   mFooterTextView.setText("Load more..."); 			   mFooterLoadingView.setVisibility(View.VISIBLE); 			   mOnPullDownListener.onMore();	    }  	}  	   protected boolean isShowFooterView() { 		   						//System.out.println("==>"+new Throwable().getStackTrace()[0].getClassName()+" > "+new Throwable().getStackTrace()[0].getMethodName());			//System.out.println("===>Line number: "+new Throwable().getStackTrace()[0].getLineNumber()); 	       if (mListView == null || mListView.getAdapter() == null) {  	           return false;  	       }  	  	       return mListView.getLastVisiblePosition() == mListView.getAdapter().getCount() - 1;  	   } }